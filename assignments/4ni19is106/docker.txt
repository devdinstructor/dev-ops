DEVOPS ASSIGNMENT (2)
Ankita Vishwanatha Hegde 4NI19IS013
1. Hypervisors v/s Dockers
Hypervisors:
	DevOps is a set of practices that combines software development and operations to shorten the systems development life cycle while delivering features, fixes, and updates frequently in close alignment with business objectives. A common practice in DevOps is the use of Hypervisors. 
A Hypervisor is a piece of software that allows multiple virtual machines to be hosted on a single physical machine. It enables administrators to create and manage virtual environments while maximizing hardware utilization. Hypervisors provide a platform to install an operating system within a virtual machine, as well as providing tools to divide physical resources among multiple virtual machines. Popular hypervisors used in DevOps are VMware, VirtualBox, KVM, Xen, Hyper-V, and others. Each hypervisor provides specific features that may be better suited for a particular use case. For example, VMware is the most widely used for enterprise-level deployments, while VirtualBox is best for home use or small businesses.
Dockers:
	Docker is an open-source containerization tool designed to make it easier to create, deploy, and run applications by using containers. It allows developers to package their applications and dependencies into a standardized unit for software development. Docker containers are isolated from each other and bundle their own software, libraries, and configuration files, so they can run quickly and reliably from one computing environment to another. 
Docker is an important part of DevOps, enabling developers to package and deploy applications without having to worry about configuring the environment quickly and easily. By using containers, developers can have applications running in a fraction of the time it would take to spin up a virtual machine. Docker containers are also more secure than traditional virtual machines as they are isolated from each other and can be deployed in a much more granular manner. This enables developers to deploy applications quickly and securely, making them ideal for DevOps. 
The combination of Docker containers and DevOps enables developers to rapidly deploy applications with confidence. The combination of automation, testing, and monitoring tools makes it easier for developers to quickly identify potential issues and make changes before they are released to the public. This helps to reduce the cost and time associated with deploying applications. 
Docker also enables developers to create applications that are portable and can easily be deployed across multiple cloud environments. This flexibility makes it easier to create applications that can be deployed in different environments and make use of different technologies. Overall, Docker is an invaluable tool for DevOps and helps developers to package and deploy applications quickly and easily. It is an important part of any DevOps workflow and enables developers to deploy applications quickly and securely.
Difference between Hypervisor and Docker:
The primary difference between the two technologies is that a hypervisor is a type of virtualization technology that creates and runs virtual machines, while Docker is a containerization platform that packages applications in containers. A hypervisor requires a guest operating system to be installed on each virtual machine, while Docker containers can run without an OS on the host system. Hypervisors provide more isolation than Docker containers, but require more resources and are more complex to manage. Docker containers are more lightweight, but provide less isolation than a hypervisor.
•	Definition: Hypervisor is a virtual machine manager which enables multiple operating systems to run on a host computer. Docker is a tool that enables users to deploy and manage applications in a virtualized environment.
•	Architecture: Hypervisor is a type 2 virtualization technology, which is installed on the physical server and abstracts the underlying hardware from the operating system. On the other hand, Docker is a type 1 virtualization technology, which runs directly on the host machine’s operating system.
•	Support: Hypervisor supports a variety of operating systems, such as Linux, Windows, and others. Docker supports a wide range of application platforms, including Linux, Windows, and others.
•	Cost: Hypervisor is a costly solution as it requires additional hardware and software licenses. Docker is the less costly option as it does not require additional hardware costs.
•	Installation: Hypervisor requires a complex installation process and requires expertise. Docker requires much less complex installation and can be done with minimal expertise.
•	Efficiency: Hypervisor is less efficient as it requires more resources for virtualization. Docker is more efficient as it requires fewer resources for virtualization.
•	Security: Hypervisor is more secure as it isolates the operating system from the underlying hardware. Docker is less secure as it does not isolate the operating system from the underlying hardware.
•	Scalability: Hypervisor is difficult to scale as it requires additional hardware and software. Docker is easier to scale as it can be done with minimal hardware and software.
 

2. Containers v/s Virtual Machines
Containers:
	DevOps is an approach that combines Development and Operations, or Dev and Ops, in an effort to improve the collaboration between the two teams. This approach focuses on automation and collaboration, and is designed to help organizations reduce the time it takes to deliver software and services. DevOps is based on four key principles. Automation, Collaboration, Monitoring, and Containers where containers are used to package applications and services, making them easier to deploy and manage in different environments. 
Containers are particularly important in a DevOps environment. They allow applications and services to be packaged together, making them easier to deploy and manage across different environments. By using containers, organizations can quickly deploy new applications and services, and roll back to a previous version if needed. Additionally, containers enable teams to build, test, and deploy applications faster, while reducing the risk of errors.
Virtual Machines:
	DevOps focuses on automating and streamlining software development processes and increasing collaboration between developers and IT professionals. Virtual machines (VMs) are a key part of DevOps. They are virtual replicas of physical machines that are created on a physical server or a virtualization platform. 
VMs can be used to test and deploy code, monitor applications, and manage infrastructure. VMs enable developers to set up an environment quickly and easily for development and test applications. By using virtual machines, developers can quickly and easily create a development environment that is isolated from the production environment. VMs also allow developers to test code in different environments and to make sure the code works in each environment before it is released to production. 
VMs also make it easier to manage infrastructure and applications. By using virtual machines, developers can quickly create and configure servers to handle different workloads. They can also easily deploy applications and monitor their performance in different environments. Finally, VMs make it easier to collaborate with other teams. By using virtual machines, multiple teams can share resources and collaborate on projects. This makes it easier to quickly create and deploy applications and to manage infrastructure.
Differences between Containers and virtual Machines:
The key differentiator between containers and virtual machines is that virtual machines virtualize an entire machine down to the hardware layers and containers only virtualize software layers above the operating system level.
•	Definition: Containers are a type of virtualization technology that provides operating system level virtualization, while virtual machines are a type of virtualization technology that provides hardware level virtualization. 
•	Environment: Containers are lightweight, share the same OS kernel, and run-on top of a single operating system instance, while virtual machines run on an isolated guest operating system instance. 
•	Performance: Containers are more efficient in terms of resource utilization, as they are isolated from each other but share the same operating system instance. Virtual machines are less efficient in terms of resource utilization, as each virtual machine has its own operating system instance.
•	 Portability: Containers are much more portable than virtual machines, as they can be moved from one environment to another without any changes. Virtual machines require a lot of configuration changes to be moved from one environment to another. 
•	Security: Containers are more secure than virtual machines, as they are isolated from each other and use the same OS kernel. Virtual machines are less secure as each virtual machine has its own OS instance.
•	Cost: Containers are much cheaper to run than virtual machines, as they are more efficient in terms of resource utilization. Virtual machines are more expensive to run as they require more resources.
